{"remainingRequest":"E:\\reactProject\\sme\\my-app\\node_modules\\eslint-loader\\index.js??ref--0-1!E:\\reactProject\\sme\\my-app\\src\\fetch\\axios.js","dependencies":[{"path":"E:\\reactProject\\sme\\my-app\\src\\fetch\\axios.js","mtime":1537512923241},{"path":"E:\\reactProject\\sme\\my-app\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000},{"path":"E:\\reactProject\\sme\\my-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538462710848},{"path":"E:\\reactProject\\sme\\my-app\\node_modules\\eslint-loader\\index.js","mtime":1499322156000}],"contextDependencies":[],"result":["/*\r\nimport axios from 'axios'\r\nimport qs from 'qs'\r\n\r\nlet http = {\r\n    get:\"\",\r\n    post:\"\"\r\n};\r\nhttp.get = function (api,params) {\r\n    // let params = qs.stringify(data)\r\n    return new Promise((resolve,reject)=>{\r\n        axios.get(api,{params}).then((res)=>{\r\n            resolve(res)\r\n        }).catch((res)=>{\r\n            reject(res)\r\n        })\r\n    })\r\n};\r\n\r\nhttp.post = function (api,params) {\r\n    // let params = qs.stringify(data)\r\n    return new Promise((resolve,reject)=>{\r\n        axios.post(api,{params}).then((res)=>{\r\n            resolve(res)\r\n        })\r\n    })\r\n}\r\nexport default http\r\n\r\n\r\n*/\r\n'use strict'\r\n\r\nimport axios from 'axios'\r\nimport qs from 'qs'\r\n\r\naxios.interceptors.request.use(config => {\r\n    // loading\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n})\r\n\r\naxios.interceptors.response.use(response => {\r\n    return response\r\n}, error => {\r\n    return Promise.resolve(error.response)\r\n})\r\n\r\nfunction checkStatus (response) {\r\n    // loading\r\n    // 如果http状态码正常，则直接返回数据\r\n    if (response && (response.status === 200 || response.status === 304 || response.status === 400)) {\r\n        return response\r\n        // 如果不需要除了data之外的数据，可以直接 return response.data\r\n    }\r\n    // 异常状态下，把错误信息返回去\r\n    return {\r\n        status: -404,\r\n        msg: '网络异常'\r\n    }\r\n}\r\n\r\nfunction checkCode (res) {\r\n    // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\r\n    if (res.status === -404) {\r\n        alert(res.msg)\r\n    }\r\n    if (res.data && (!res.data.success)) {\r\n        alert(res.data.error_msg)\r\n    }\r\n    return res\r\n}\r\n\r\nexport default {\r\n    post (url, data) {\r\n        return axios({\r\n            method: 'post',\r\n            baseURL: 'https://cnodejs.org/api/v1',\r\n            url,\r\n            data: qs.stringify(data),\r\n            timeout: 10000,\r\n            headers: {\r\n                'X-Requested-With': 'XMLHttpRequest',\r\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\r\n            }\r\n        }).then(\r\n            (response) => {\r\n                return checkStatus(response)\r\n            }\r\n        ).catch(\r\n            (res) => {\r\n                return checkCode(res)\r\n            }\r\n        )\r\n    },\r\n    get (url, params) {\r\n        return axios({\r\n            method: 'get',\r\n            baseURL: 'https://cnodejs.org/api/v1',\r\n            url,\r\n            params, // get 请求时带的参数\r\n            timeout: 10000,\r\n            headers: {\r\n                'X-Requested-With': 'XMLHttpRequest'\r\n            }\r\n        }).then(\r\n            (response) => {\r\n                return checkStatus(response)\r\n            }\r\n        ).catch(\r\n            (res) => {\r\n                return checkCode(res)\r\n            }\r\n        )\r\n    }\r\n}",null]}