{"remainingRequest":"D:\\project\\my-sme\\my-app\\node_modules\\eslint-loader\\index.js??ref--0-1!D:\\project\\my-sme\\my-app\\src\\fetch\\axios.js","dependencies":[{"path":"D:\\project\\my-sme\\my-app\\src\\fetch\\axios.js","mtime":1539266030075},{"path":"D:\\project\\my-sme\\my-app\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000},{"path":"D:\\project\\my-sme\\my-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1539356125690},{"path":"D:\\project\\my-sme\\my-app\\node_modules\\eslint-loader\\index.js","mtime":1499322156000}],"contextDependencies":[],"result":["/*\nimport axios from 'axios'\nimport qs from 'qs'\n\nlet http = {\n    get:\"\",\n    post:\"\"\n};\nhttp.get = function (api,params) {\n    // let params = qs.stringify(data)\n    return new Promise((resolve,reject)=>{\n        axios.get(api,{params}).then((res)=>{\n            resolve(res)\n        }).catch((res)=>{\n            reject(res)\n        })\n    })\n};\n\nhttp.post = function (api,params) {\n    // let params = qs.stringify(data)\n    return new Promise((resolve,reject)=>{\n        axios.post(api,{params}).then((res)=>{\n            resolve(res)\n        })\n    })\n}\nexport default http\n\n\n*/\n'use strict'\n\nimport axios from 'axios'\nimport qs from 'qs'\n\naxios.interceptors.request.use(config => {\n    // loading\n    return config\n}, error => {\n    return Promise.reject(error)\n})\n\naxios.interceptors.response.use(response => {\n    return response\n}, error => {\n    return Promise.resolve(error.response)\n})\n\nfunction checkStatus (response) {\n    // loading\n    // 如果http状态码正常，则直接返回数据\n    if (response && (response.status === 200 || response.status === 304 || response.status === 400)) {\n        return response\n        // 如果不需要除了data之外的数据，可以直接 return response.data\n    }\n    // 异常状态下，把错误信息返回去\n    return {\n        status: -404,\n        msg: '网络异常'\n    }\n}\n\nfunction checkCode (res) {\n    // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n    if (res.status === -404) {\n        alert(res.msg)\n    }\n    if (res.data && (!res.data.success)) {\n        alert(res.data.error_msg)\n    }\n    return res\n}\n\nexport default {\n    post (url, data) {\n        return axios({\n            method: 'post',\n            baseURL: 'https://cnodejs.org/api/v1',\n            url,\n            data: qs.stringify(data),\n            timeout: 10000,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n            }\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).catch(\n            (res) => {\n                return checkCode(res)\n            }\n        )\n    },\n    get (url, params) {\n        return axios({\n            method: 'get',\n            baseURL: 'https://cnodejs.org/api/v1',\n            url,\n            params, // get 请求时带的参数\n            timeout: 10000,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest'\n            }\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).catch(\n            (res) => {\n                return checkCode(res)\n            }\n        )\n    }\n}",null]}