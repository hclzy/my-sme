{"remainingRequest":"D:\\project\\my-sme\\my-app\\node_modules\\eslint-loader\\index.js??ref--0-1!D:\\project\\my-sme\\my-app\\src\\api\\axios.js","dependencies":[{"path":"D:\\project\\my-sme\\my-app\\src\\api\\axios.js","mtime":1542296607122},{"path":"D:\\project\\my-sme\\my-app\\node_modules\\babel-loader\\lib\\index.js","mtime":1503096278000},{"path":"D:\\project\\my-sme\\my-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1539356125690},{"path":"D:\\project\\my-sme\\my-app\\node_modules\\eslint-loader\\index.js","mtime":1499322156000}],"contextDependencies":[],"result":["import axios from 'axios'\nimport qs from 'qs'\n// import store from '@/store'\n// import { Message } from 'element-ui'\n// import {getCookie} from '@/utils/cookie'\n\n//创建实例\nconst instance = axios.create({\n    //当创建实例的时候配置默认配置\n    xsrfCookieName: 'xsrf-token',\n    timeout: 5000,\n});\n//添加请求拦截\n\nconst codeMessage = {\n    200: '服务器成功返回请求的数据。',\n    201: '新建或修改数据成功。',\n    202: '一个请求已经进入后台排队（异步任务）。',\n    204: '删除数据成功。',\n    400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\n    401: '用户没有权限（令牌、用户名、密码错误）。',\n    403: '用户得到授权，但是访问是被禁止的。',\n    404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\n    406: '请求的格式不可得。',\n    410: '请求的资源被永久删除，且不会再得到的。',\n    422: '当创建一个对象时，发生一个验证错误。',\n    500: '服务器发生错误，请检查服务器。',\n    502: '网关错误。',\n    503: '服务不可用，服务器暂时过载或维护。',\n    504: '网关超时。',\n};\n\ninstance.interceptors.request.use(config => {\n    // loading\n    /*if(store.getters.token){\n        config.headers['TOKEN']=getCookie('TOKEN')\n    }*/\n    return config\n}, error => {\n    return Promise.reject(error)\n});\n//添加响应拦截器\ninstance.interceptors.response.use(response => {\n    /**\n     * 下面的注释为通过在response里，自定义code来标示请求状态\n     * 当code返回如下情况则说明权限有问题，登出并返回到登录页\n     * 如想通过xmlhttprequest来状态码标识 逻辑可写在下面error中\n     */\n    // response => {\n    //   const res = response.data\n    //   if (res.code !== 20000) {\n    //     })\n    //     // 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;\n    //     if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n    //       }).then(() => {\n    //         })\n    //       })\n    //     }\n    //     return Promise.reject('error')\n    //   } else {\n    //     return response.data\n    //   }\n    // },\n\n    return response\n}, error => {\n    console.log('err'+error);\n    /*Message({\n        Message:error.message,\n        type:'error',\n        duration:5*1000\n    })*/\n    return Promise.resolve(error.response)\n});\n\nfunction checkStatus (response) {\n    // loading\n    // 如果http状态码正常，则直接返回数据\n    if (response && (response.status === 200 || response.status === 304 || response.status === 400)) {\n        return response\n        // 如果不需要除了data之外的数据，可以直接 return response.data\n    }\n    // 异常状态下，把错误信息返回去\n    return {\n        status: -404,\n        msg: '网络异常'\n    }\n}\n\nfunction checkCode (res) {\n    // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n    if (res.status === -404) {\n        alert(res.msg)\n    }\n    if (res.data && (!res.data.success)) {\n        alert(res.data.error_msg)\n    }\n    return res\n}\n\nexport default {\n        post (url, data) {\n        return axios({\n            method: 'post',\n            // baseURL: 'https://cnodejs.org/api/v1',\n            url,\n            data: qs.stringify(data),\n\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n            }\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).catch(\n            (res) => {\n                return checkCode(res)\n            }\n        )\n    },\n    get (url, params) {\n        return axios({\n            method: 'get',\n            baseURL: '',\n            url,\n            params, // get 请求时带的参数\n            timeout: 5000,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest'\n            }\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).catch(\n            (res) => {\n                return checkCode(res)\n            }\n        )\n    }\n}",null]}